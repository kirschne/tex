\relax 
\citation{chip11s2e}
\citation{chip12s2e}
\select@language{english}
\@writefile{toc}{\select@language{english}}
\@writefile{lof}{\select@language{english}}
\@writefile{lot}{\select@language{english}}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}}
\citation{chip14s2e}
\citation{chip14s2e}
\citation{chip09sel}
\citation{chip09sel}
\citation{klee08}
\citation{nasa08}
\citation{chip09sel}
\citation{chip09sel}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Execution tree with path constraints for the symbolic variable $rpm$ \cite  {chip14s2e}\relax }}{2}}
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{fig:introex}{{1}{2}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Selective Symbolic Execution}{2}}
\newlabel{sec:s2e}{{2}{2}}
\citation{chip14s2e}
\citation{chip14s2e}
\citation{chip14s2e}
\citation{chip12s2e}
\citation{chip12s2e}
\citation{chip14s2e}
\citation{kuznetsov2010testing}
\citation{chipounov2010reverse}
\citation{chip12s2e}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Selective symbolic execution: only paths inside a defined scope of interest (here: a library function $libFn$) are explored symbolically - the rest of the system stack runs concretely \cite  {chip14s2e}.\relax }}{3}}
\newlabel{fig:ssetree}{{2}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Excerpt from $libFn$'s execution tree \cite  {chip12s2e}\relax }}{3}}
\newlabel{fig:ssetree2}{{3}{3}}
\citation{bitcode}
\citation{chip12s2e}
\citation{qemu}
\citation{qemu05}
\citation{klee}
\citation{klee08}
\citation{llvm}
\citation{llvm04}
\citation{chip12s2e}
\citation{chip12s2e}
\citation{bitcode}
\citation{chip14s2e}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Architecture of the S\textsuperscript  {2}E\xspace  platform \cite  {chip12s2e}\relax }}{4}}
\newlabel{fig:arch}{{4}{4}}
\@writefile{toc}{\contentsline {section}{\numberline {3}The S\textsuperscript  {2}E\xspace  Platform}{4}}
\newlabel{sec:platform}{{3}{4}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Project Idea and Research Questions}{4}}
\newlabel{sec:proj}{{4}{4}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Implementation}{5}}
\newlabel{sec:impl}{{5}{5}}
\newlabel{lst:ass}{{1}{6}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {1}Relevant parts of the function \textit  {send\_data()} in assembly code. Interesting calls are highlighted.}{6}}
\newlabel{lst:ann_def}{{2}{6}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {2}Configuration of the \textit  {Annotations} plugin (part). Defines the instructions to be monitored and actions to trigger upon execution of these instructions. Note the link to the binary in listing \ref  {lst:ass} via memory addresses.}{6}}
\newlabel{lst:send_data}{{3}{7}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {3}Lua function executed upon every call of the function \textit  {send\_data()}. See lines 18 - 24 in listing \ref  {lst:ann_def} for the registration of \textit  {call\_ann()}.}{7}}
\@writefile{toc}{\contentsline {section}{\numberline {6}Analysis of S\textsuperscript  {2}E\xspace  Output}{7}}
\newlabel{sec:ana}{{6}{7}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Tree visualisation for understanding path forking behaviour in the analysis of \textit  {SuperTaxCalcPro}\xspace  . Shows at which memory addresses S\textsuperscript  {2}E\xspace  forked new execution states. Path constraints are printed at each state transition. For most states, the \textit  {TestCaseGenerator} found meaningful concrete example values for the two symbolic variables $income$ and $taxcat$. Blue dots symbolise that in this state a ``donation'' message was transferred to a server. Red dots mark states which leak the complete set of user inputs.\relax }}{9}}
\newlabel{fig:tree}{{5}{9}}
\citation{chip14s2e}
\citation{trojan14}
\citation{chipounov2010reverse}
\citation{chipounov2011enabling}
\citation{caballero2010input}
\@writefile{toc}{\contentsline {section}{\numberline {7}Outlook}{11}}
\newlabel{sec:outlook}{{7}{11}}
\@writefile{toc}{\contentsline {section}{\numberline {8}Related Work}{11}}
\newlabel{sec:rel_work}{{8}{11}}
\citation{song2008bitblaze}
\bibstyle{amsplain}
\bibdata{bib}
\bibcite{klee}{1}
\bibcite{llvm}{2}
\bibcite{bitcode}{3}
\bibcite{qemu}{4}
\bibcite{trojan14}{5}
\bibcite{qemu05}{6}
\bibcite{caballero2010input}{7}
\bibcite{klee08}{8}
\bibcite{chip14s2e}{9}
\bibcite{chipounov2010reverse}{10}
\bibcite{chip09sel}{11}
\bibcite{chip11s2e}{12}
\bibcite{kuznetsov2010testing}{13}
\bibcite{llvm04}{14}
\bibcite{nasa08}{15}
\@writefile{toc}{\contentsline {section}{\numberline {9}Conclusion}{12}}
\newlabel{sec:conclusion}{{9}{12}}
\bibcite{song2008bitblaze}{16}
\bibcite{chipounov2011enabling}{17}
\bibcite{chip12s2e}{18}
\newlabel{sec:appendix}{{9}{13}}
\newlabel{lst:appendix}{{4}{13}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {4}C++ code of \textit  {SuperTaxCalcPro}\xspace  . Notes:\\ - Code already contains S\textsuperscript  {2}E\xspace  annotations. \\ - For performance reasons all output is escaped. \\ - Due to an unresolved int32\_to\_floatx80 conversion problem in KLEE, type conversions are generally avoided (only integer calculations are used). Correctness of tax calculations does not matter here anyway.}{13}}
\newlabel{LastPage}{{}{13}}
\xdef\lastpage@lastpage{13}
\gdef\lastpage@lastpageHy{}
